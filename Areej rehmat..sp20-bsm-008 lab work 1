{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "c059db2e-a8f7-4cb2-8940-133a0a781b96",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Matplotlib is building the font cache; this may take a moment.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "b76c67fb-ab6a-4b84-85b4-d2724e01dffd",
   "metadata": {},
   "outputs": [],
   "source": [
    "b1 = np.array ([5,7,9,11,13])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "2aa38c27-7640-4567-b76c-7089f03348dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([25, 35, 45, 55, 65])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b1*5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "85b952cb-2f2a-444c-858d-105004ac6fd6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "b2 = np.zeros(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c99a68b6-f9d8-4137-b74c-a8d334ade068",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0.])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "c331aa57-8611-45f4-8cae-aa7280d77007",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(-4,4,10)\n",
    "y = x**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "a3a43e31-2351-4d4a-8e8f-5721d757a5a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-4.        , -3.11111111, -2.22222222, -1.33333333, -0.44444444,\n",
       "        0.44444444,  1.33333333,  2.22222222,  3.11111111,  4.        ])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "091ac49c-8bfd-4e35-9697-2149a61244d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'time')"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y)\n",
    "plt.grid()\n",
    "plt.xlabel('distance',fontsize =10)\n",
    "plt.ylabel('time',fontsize =10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "1e01ed1b-e829-49cc-872b-e957833df91c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(0, 20)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = (20)\n",
    "range (20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "c92e1b91-4032-407d-bd88-e3fa50577b22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n"
     ]
    }
   ],
   "source": [
    "for i in range(a):\n",
    "      print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "95592725-c03d-4c5e-8802-13ec965af683",
   "metadata": {},
   "outputs": [],
   "source": [
    "x1 = np.arange (8,10,79)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "1eacf928-09fb-4746-9bcf-f0b5bf29861e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8])"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "0c8b4c94-a8b5-4d90-9321-00864e2a690d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.         10.26315789 10.52631579 10.78947368 11.05263158 11.31578947\n",
      " 11.57894737 11.84210526 12.10526316 12.36842105 12.63157895 12.89473684\n",
      " 13.15789474 13.42105263 13.68421053 13.94736842 14.21052632 14.47368421\n",
      " 14.73684211 15.        ]\n"
     ]
    }
   ],
   "source": [
    "x = np.linspace(10,15,20)\n",
    "print (x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "b3f98854-9713-4260-9a22-d2f72a996525",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=x**2\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "d0a5e8ed-c1d7-4a4a-8742-39617bc0fc4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100.         105.33240997 110.8033241  116.41274238 122.16066482\n",
      " 128.04709141 134.07202216 140.23545706 146.53739612 152.97783934\n",
      " 159.5567867  166.27423823 173.13019391 180.12465374 187.25761773\n",
      " 194.52908587 201.93905817 209.48753463 217.17451524 225.        ]\n"
     ]
    }
   ],
   "source": [
    "print (y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "1ed6c76e-c7f4-45eb-a15f-99658ffd2725",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "803ff05c-0398-400a-a180-93182589c5de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[110.         115.59556787 121.32963989 127.20221607 133.2132964\n",
      " 139.36288089 145.65096953 152.07756233 158.64265928 165.34626039\n",
      " 172.18836565 179.16897507 186.28808864 193.54570637 200.94182825\n",
      " 208.47645429 216.14958449 223.96121884 231.91135734 240.        ]\n"
     ]
    }
   ],
   "source": [
    "print (x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "c1f160f1-9770-482f-8f29-182b612f5fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.sqrt (x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "7e6bf18b-fc32-4884-8ab4-e9228ee69f90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10.48808848 10.75153793 11.01497344 11.27839599 11.54180646 11.80520567\n",
      " 12.06859435 12.33197317 12.59534276 12.85870368 13.12205646 13.38540157\n",
      " 13.64873945 13.91207053 14.17539517 14.43871373 14.70202654 14.9653339\n",
      " 15.2286361  15.49193338]\n"
     ]
    }
   ],
   "source": [
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "d0c4958a-4ae1-4017-9160-5c654211fc75",
   "metadata": {},
   "outputs": [],
   "source": [
    "v = y/x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "01f35a3d-19cb-4473-8769-649088ee7a77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.09534626 0.09300995 0.09078551 0.08866509 0.08664155 0.08470839\n",
      " 0.08285969 0.08109002 0.07939443 0.07776834 0.07620757 0.07470826\n",
      " 0.07326684 0.07188003 0.07054477 0.06925825 0.06801783 0.0668211\n",
      " 0.06566576 0.06454972]\n"
     ]
    }
   ],
   "source": [
    "print(v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f88baece-d903-4650-a615-4ccd98db8ebf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
